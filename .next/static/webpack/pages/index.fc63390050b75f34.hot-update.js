"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./lib/importUtils.js":
/*!****************************!*\
  !*** ./lib/importUtils.js ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"importPlayers\": function() { return /* binding */ importPlayers; },\n/* harmony export */   \"importSchedule\": function() { return /* binding */ importSchedule; },\n/* harmony export */   \"parseCSV\": function() { return /* binding */ parseCSV; }\n/* harmony export */ });\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! papaparse */ \"./node_modules/papaparse/papaparse.min.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _models_Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/Player */ \"./models/Player.js\");\n/* harmony import */ var _models_Team__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/Team */ \"./models/Team.js\");\n/* harmony import */ var _models_Match__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/Match */ \"./models/Match.js\");\n\n\n\n\n/**\n * Parse CSV data from string\n * @param {string} csvString - CSV data as string \n * @returns {Array} Parsed data\n */ function parseCSV(csvString) {\n    var result = papaparse__WEBPACK_IMPORTED_MODULE_0___default().parse(csvString, {\n        skipEmptyLines: true,\n        header: false\n    });\n    if (result.errors && result.errors.length > 0) {\n        throw new Error(\"Error parsing CSV: \".concat(result.errors[0].message));\n    }\n    return result.data;\n}\n/**\n * Import player data from CSV string\n * @param {string} csvString - CSV data as string\n * @returns {Array} Array of Player objects\n */ function importPlayers(csvString) {\n    var data = parseCSV(csvString);\n    // Skip header row if it exists\n    var hasHeader = isHeaderRow(data[0]);\n    var playerData = hasHeader ? data.slice(1) : data;\n    return playerData.map(function(row) {\n        return _models_Player__WEBPACK_IMPORTED_MODULE_1__.Player.fromRow(row);\n    });\n}\n/**\n * Import schedule data from CSV string\n * @param {string} csvString - CSV data as string\n * @param {Object} teamsMap - Map of team names to Team objects by division\n * @returns {Array} Array of Match objects\n */ function importSchedule(csvString, teamsMap) {\n    var data = parseCSV(csvString);\n    // Skip header row if it exists\n    var hasHeader = isScheduleHeaderRow(data[0]);\n    var scheduleData = hasHeader ? data.slice(1) : data;\n    // Filter out empty rows and special rows (SETUP, PACKING DOWN)\n    scheduleData = scheduleData.filter(function(row) {\n        // Skip completely empty rows\n        if (row.every(function(cell) {\n            return !cell || cell.trim() === \"\";\n        })) return false;\n        // Check if this is a special row like SETUP or PACKING DOWN\n        var isSpecialRow = row.some(function(cell) {\n            return cell && typeof cell === \"string\" && (cell.includes(\"SETUP\") || cell.includes(\"PACKING DOWN\"));\n        });\n        return !isSpecialRow;\n    });\n    return processScheduleFormat(scheduleData, teamsMap);\n}\n/**\n * Process schedule data based on format detection\n * @param {Array} scheduleData - Parsed schedule data\n * @param {Object} teamsMap - Map of team names to Team objects by division\n * @returns {Array} Array of Match objects\n */ function processScheduleFormat(scheduleData, teamsMap) {\n    var matches = [];\n    var currentDivision = \"\";\n    var timeSlotCounter = 1;\n    for(var i = 0; i < scheduleData.length; i++){\n        var row = scheduleData[i];\n        // Skip rows that are too short\n        if (row.length < 6) continue;\n        // Check if this row contains a division header\n        if (row[0] && !row[2] && !row[3] && row[0] !== \"Round\") {\n            currentDivision = row[0].toLowerCase();\n            continue;\n        }\n        // Format detection and extraction\n        var division = void 0, time = void 0, team1 = void 0, team2 = void 0, field = void 0, refereeTeam = void 0;\n        // Try to detect if this is the tournament-specific format\n        if (row[0] === \"\" && row[1] && row[2] && row[3] && row[4]) {\n            // This is likely the tournament format where div is in column 1\n            division = (row[1] || currentDivision || \"\").toLowerCase();\n            time = row[2] || \"\";\n            team1 = row[3] || \"\";\n            team2 = row[4] || \"\";\n            field = row[5] || \"\";\n            refereeTeam = row[6] || \"\";\n        } else {\n            // Try generic format or fallback\n            division = (row[1] || currentDivision || \"\").toLowerCase();\n            time = row[2] || \"\";\n            team1 = row[3] || \"\";\n            team2 = row[4] || \"\";\n            field = row[5] || \"\";\n            refereeTeam = row[6] || \"\";\n            // If division is empty or doesn't match expected format, try different column mapping\n            if (!division || !division.match(/^(mx|m|w)/i)) {\n                var firstCol = (row[0] || \"\").toLowerCase();\n                if (firstCol.match(/^(mx|m|w)/i)) {\n                    // Division is in first column\n                    division = firstCol;\n                    // Shift other columns if needed\n                    if (!time && row[1]) time = row[1];\n                    if (!team1 && row[2]) team1 = row[2];\n                    if (!team2 && row[3]) team2 = row[3];\n                    if (!field && row[4]) field = row[4];\n                    if (!refereeTeam && row[5]) refereeTeam = row[5];\n                }\n            }\n        }\n        // Skip if essential data is missing\n        if (!division || !team1 || !team2) continue;\n        // Normalize division format (mx1, mx2, m1, m2, w)\n        var normalizedDivision = division.toLowerCase();\n        if (normalizedDivision.startsWith(\"mx\")) {\n            normalizedDivision = \"mixed\";\n        } else if (normalizedDivision.startsWith(\"m\")) {\n            normalizedDivision = \"gendered\";\n        } else if (normalizedDivision.startsWith(\"w\")) {\n            normalizedDivision = \"gendered\";\n        } else {\n            // Use division from context if available\n            normalizedDivision = currentDivision || \"mixed\";\n        }\n        // Convert time to slot number if it's a time string\n        var timeSlot = timeSlotCounter++;\n        if (time && time.includes(\":\")) {\n            // It's a time string, convert to numerical order\n            var timeParts = time.split(\":\");\n            if (timeParts.length === 2) {\n                var hours = parseInt(timeParts[0]);\n                var minutes = parseInt(timeParts[1]);\n                // Create a time value for sorting (e.g., 9:30 becomes 930)\n                timeSlot = hours * 100 + minutes;\n            }\n        }\n        // Look up teams in the team map\n        var divTeams = teamsMap[normalizedDivision] || {};\n        // Create teams if they don't exist in the map\n        if (!divTeams[team1]) {\n            divTeams[team1] = new _models_Team__WEBPACK_IMPORTED_MODULE_2__.Team(team1, normalizedDivision);\n        }\n        if (!divTeams[team2]) {\n            divTeams[team2] = new _models_Team__WEBPACK_IMPORTED_MODULE_2__.Team(team2, normalizedDivision);\n        }\n        // Look up referee team if provided\n        var refTeam = null;\n        if (refereeTeam && refereeTeam !== \"-\") {\n            // Extract team name if it has division in parentheses, e.g., \"Team Name (MX)\"\n            var refTeamName = refereeTeam.split(\"(\")[0].trim();\n            if (divTeams[refTeamName]) {\n                refTeam = divTeams[refTeamName];\n            } else {\n                // Try to find the referee team in any division\n                for(var div in teamsMap){\n                    if (teamsMap[div][refTeamName]) {\n                        refTeam = teamsMap[div][refTeamName];\n                        break;\n                    }\n                }\n                // If still not found, create it\n                if (!refTeam) {\n                    refTeam = new _models_Team__WEBPACK_IMPORTED_MODULE_2__.Team(refTeamName, normalizedDivision);\n                    divTeams[refTeamName] = refTeam;\n                }\n            }\n        }\n        // Create the match\n        var match = new _models_Match__WEBPACK_IMPORTED_MODULE_3__.Match(divTeams[team1], divTeams[team2], timeSlot, field, normalizedDivision, refTeam);\n        matches.push(match);\n    }\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        // Update the teams map with any new teams\n        for(var _iterator = matches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var match1 = _step.value;\n            if (!teamsMap[match1.division]) {\n                teamsMap[match1.division] = {};\n            }\n            if (!teamsMap[match1.division][match1.team1.name]) {\n                teamsMap[match1.division][match1.team1.name] = match1.team1;\n            }\n            if (!teamsMap[match1.division][match1.team2.name]) {\n                teamsMap[match1.division][match1.team2.name] = match1.team2;\n            }\n            if (match1.refereeTeam && !teamsMap[match1.division][match1.refereeTeam.name]) {\n                teamsMap[match1.division][match1.refereeTeam.name] = match1.refereeTeam;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Check if a row is likely a header row for player data\n * @param {Array} row - Row data\n * @returns {boolean} True if row appears to be a header\n */ function isHeaderRow(row) {\n    if (!row || row.length === 0) return false;\n    // Check if first value is a non-numeric string like \"Name\" or \"Player\"\n    var firstCell = String(row[0]).toLowerCase();\n    return isNaN(firstCell) && (firstCell.includes(\"name\") || firstCell.includes(\"player\") || firstCell.includes(\"team\"));\n}\n/**\n * Check if a row is likely a header row for schedule data\n * @param {Array} row - Row data\n * @returns {boolean} True if row appears to be a header\n */ function isScheduleHeaderRow(row) {\n    if (!row || row.length === 0) return false;\n    // Check for common schedule header columns\n    var headerKeywords = [\n        \"round\",\n        \"division\",\n        \"time\",\n        \"team\",\n        \"court\",\n        \"field\",\n        \"referee\"\n    ];\n    // Count how many cells contain header keywords\n    var headerKeywordCount = 0;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        var _loop = function() {\n            var cell = _step.value;\n            var cellText = String(cell).toLowerCase();\n            if (headerKeywords.some(function(keyword) {\n                return cellText.includes(keyword);\n            })) {\n                headerKeywordCount++;\n            }\n        };\n        for(var _iterator = row[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    // If at least 3 header keywords are found, consider it a header row\n    return headerKeywordCount >= 3;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/importUtils.js\n"));

/***/ })

});